# .bashrc

# Defaul bash
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

# User specific binaries path
if ! [[ "$PATH" =~ "$HOME/.local/bin:$HOME/bin:" ]]; then
    PATH="$HOME/.local/bin:$HOME/bin:$PATH"
fi
export PATH

export SCRIPTS_PATH="$HOME/.dotfiles/scripts"
export WALLPAPER_FOLDER="$HOME/media/photos/Wallpapers"

# Auto start ssh-agent
if [ -z "$SSH_AUTH_SOCK" ]; then
    eval "$(ssh-agent -s)" > /dev/null
fi

if [ "$SSH_AUTH_SOCK" ]; then
	$SCRIPTS_PATH/ssh-keys.sh > /dev/null 2>&1 
fi

# Environment
export HISTSIZE=10000
# Set neovim as default editor if installed
if which nvim > /dev/null 2>&1; then
	export EDITOR=nvim
fi

# Prompt appearance
# Number of trailing dirs on prompt
# export PROMPT_DIRTRIM=2
# Function to display git branch
parse_git_branch() {
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}
# PS1='[\u@\h] \w $ '
# PS1='\[\033[38;5;39m\]\u\[\033[38;5;245m\]@\[\033[38;5;33m\]\h \[\033[38;5;245m\][\[\033[38;5;76m\]\w\[\033[38;5;245m\]]\n\[\033[38;5;208m\]❯\[\033[0m\] '
PS1='\[\033[38;5;39m\]\u\[\033[38;5;245m\]@\[\033[38;5;33m\]\h \[\033[38;5;245m\][\[\033[38;5;76m\]\w\[\033[38;5;245m\]]\[\033[38;5;196m\]$(parse_git_branch)\n\[\033[38;5;208m\]❯\[\033[0m\] '

# Aliases
alias aliases="cat $HOME/.bashrc | grep alias"
alias lsc="ls -ltskhtr --color --group-directories-first"
alias dnfi="sudo dnf install -y"
alias dnfr="sudo dnf remove -y"
# Fetch
alias ff='pyfiglet -s $(fastfetch -s os --format json | jq -r ".[0].result.name") && echo "" && fastfetch -l none && echo ""'
# Git
alias ga="git add"
alias gs="git status"
alias gp="git push"
alias gc="git checkout"
alias gsw="git switch"
alias gd="git diff"
alias gr="git restore"
alias grs="git restore --staged"
alias gcm="git commit -m"

# File manager
if which nnn >/dev/null 2>&1 ;then
	source $HOME/.dotfiles/config/nnn.config
fi

# Fastfetch
if [[ $- != *i* ]] ;then						# is interactive
    return;										# don´t run it
else
	if which fastfetch >/dev/null 2>&1 ;then	# check if installed
		ff
    fi
fi

# Tmux
ENABLE_TMUX=false
if [ "$ENABLE_TMUX" == true ]; then
	if which tmux >/dev/null 2>&1 ;then								# check if tmux is installed
		if [[ -z "$TMUX" ]] ;then									# do not allow "tmux in tmux"
			ID="$( tmux ls | grep -vm1 attached | cut -d: -f1 )"    # get the id of a deattached session
			if [[ -z "$ID" ]] ;then                                 # if not available
				tmux new-session									# start new session
			else													# if available
				tmux attach-session -t "$ID"						# attach to it
			fi
		fi
	fi
fi
